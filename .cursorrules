# BOR Environment Management System

This project contains scripts to manage environment files for all BOR-related projects/containers and deploy them to production environments.

## Container Architecture

The system manages these BOR containers:
- `bor-db` - Database container
- `bor-api` - API container  
- `bor-app` - Application container
- `bor-airflow` - Airflow container
- `bor-files` - Files container
- `bor-message` - Message container

## Directory Structure

```
bor-env/                          # This git repository (scripts only)
├── scripts/
│   ├── copy-from-repos.sh       # Copy .env files from bor-* repos
│   ├── create-prod-envs.sh      # Create amalgamated production files
│   └── scp-prod-envs.sh         # Deploy to production server
└── .cursorrules

../bor-secrets/                   # Centralized env files (NOT in git)
├── bor-db/
│   ├── .env                     # Base environment
│   ├── .env.production          # Production overrides
│   ├── .env.production.local    # Local production overrides
│   └── prod-out/
│       └── bor-db.production.env # Final amalgamated file
├── bor-api/
│   ├── .env
│   ├── .env.production
│   ├── .env.production.local
│   └── prod-out/
│       └── bor-api.production.env
├── bor-app/
│   ├── .env
│   ├── .env.production
│   ├── .env.production.local
│   └── prod-out/
│       └── bor-app.production.env
├── bor-airflow/
│   ├── .env
│   ├── .env.production
│   └── prod-out/
│       └── bor-airflow.production.env
├── bor-files/
│   ├── .env
│   ├── .env.production
│   └── prod-out/
│       └── bor-files.production.env
└── bor-message/
    ├── .env
    ├── .env.production
    └── prod-out/
        └── bor-message.production.env

../bor-*/                         # Individual bor-* repositories
├── bor-db/
├── bor-api/
├── bor-app/
├── bor-airflow/
├── bor-files/
└── bor-message/
```

## Script Workflow

### 1. copy-from-repos.sh
**Purpose**: Copies `.env*` files from individual bor-* repositories into the centralized `../bor-secrets` directory.

**Usage**:
```bash
# Copy env files from all repositories
./scripts/copy-from-repos.sh

# This will:
# - Copy .env, .env.production, .env.production.local from each ../bor-* repo
# - Create ../bor-secrets/<container>/ subdirectories
# - Set proper permissions (600) on copied files
```

**What it does**:
- Scans parent directory for bor-* repositories
- Copies all `.env*` files to corresponding `../bor-secrets/<container>/` subdirectories
- Creates target directories if they don't exist
- Sets secure permissions (600) on copied files

### 2. create-prod-envs.sh
**Purpose**: Creates amalgamated production environment files by concatenating multiple .env files in the correct order.

**Usage**:
```bash
# Create production env files for all containers
./scripts/create-prod-envs.sh

# This will:
# - Read from ../bor-secrets/<container>/ directories
# - Create ../bor-secrets/<container>/prod-out/ directories
# - Generate <container>.production.env files
```

**File Concatenation Order** (later files override earlier ones):
1. `.env` (base environment)
2. `.env.production` (production overrides)
3. `.env.production.local` (final local overrides)

**Output**: Each container gets a `prod-out/<container>.production.env` file with all variables merged.

### 3. scp-prod-envs.sh
**Purpose**: Deploys production environment files to the production server.

**Usage**:
```bash
# Deploy single container
./scripts/scp-prod-envs.sh bor-app

# Deploy all containers (with confirmation)
./scripts/scp-prod-envs.sh

# Deploy specific container
./scripts/scp-prod-envs.sh bor-db
```

**What it does**:
- Copies `<container>.production.env` files to production server
- Creates remote directories if needed
- Sets proper permissions on server
- Verifies file transfer integrity
- Provides confirmation prompt when deploying all containers

## Complete Workflow Example

```bash
# 1. Copy environment files from repositories
./scripts/copy-from-repos.sh

# 2. Create amalgamated production files
./scripts/create-prod-envs.sh

# 3. Deploy to production (single container)
./scripts/scp-prod-envs.sh bor-app

# 4. Deploy to production (all containers)
./scripts/scp-prod-envs.sh
```

## Production Server Configuration

**Server Details**:
- Host: `xenodochial-turing.108-175-7-118.plesk.page`
- User: `robmenning.com`
- Target Path: `/var/www/vhosts/robmenning.com/bor/bor-secret`

**File Permissions**:
- Local: `600` (owner read/write only)
- Server: `600` (owner read/write only)

## Security Features

- `../bor-secrets` is NOT a git repository
- All .env files have restrictive permissions (600)
- Scripts validate container names before processing
- Confirmation required for deploying all containers
- File integrity verification after transfer

## Docker Integration

The final production environment files can be used with Docker's `--env-file` flag:

```bash
# Example Docker run command
docker run \
  --env-file /var/www/vhosts/robmenning.com/bor/bor-secret/bor-app.production.env \
  your-image-name
```

## Best Practices

1. **Always run scripts in order**: copy → create → deploy
2. **Test single containers first** before deploying all
3. **Keep ../bor-secrets separate** from any git repositories
4. **Review amalgamated files** before deployment
5. **Use single container deployment** for testing and debugging
6. **Verify file permissions** on both local and server

## Troubleshooting

- **Missing env files**: Run `copy-from-repos.sh` first
- **Permission denied**: Check file permissions in `../bor-secrets`
- **SSH connection issues**: Verify server credentials and connectivity
- **File size mismatch**: Re-run the deployment script

